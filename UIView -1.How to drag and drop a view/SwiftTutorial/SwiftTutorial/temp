if(imageViewPet == nil) {
            print("image is nil. Cannot upload")
            return
        }
        
        let storageRef = (UIApplication.shared.delegate as! AppDelegate).firebaseStorage?.reference().child("images")
        let fileName = String.randomString(length: 20) + ".jpg"
        let imageRef = storageRef?.child(fileName)
        let imageData:Data = UIImagePNGRepresentation(imageViewPet.image!)!
        let uploadTask = imageRef?.put(imageData, metadata: nil) { (metadata, error) in
            guard let metadata = metadata else {
                print("cannot upload image to Firebase !")
                return
            }
            // Metadata contains file metadata such as size, content-type, and download URL.
            let downloadURL = metadata.downloadURL
            print("downloadURL : \(downloadURL()?.path ?? "")")
            
            (UIApplication.shared.delegate as! AppDelegate).fireBaseRef.child("pets").child("meo meoXX")
                .setValue(["name": self.txtPetName?.text ?? "",
                           "age": self.txtPetAge?.text ?? "",
                           "imageFullPath": downloadURL()?.path ?? "",
                           "imageName": fileName
                    ])
            
        }
        // Add a progress observer to an upload task
        let observer = uploadTask?.observe(.progress) { snapshot in
            print("upload progress = \(snapshot.progress?.localizedDescription)")
        }

import Foundation
extension String {
    static func randomString(length: Int) -> String {
        
        let letters : NSString = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        let len = UInt32(letters.length)
        
        var randomString = ""
        
        for _ in 0 ..< length {
            let rand = arc4random_uniform(len)
            var nextChar = letters.character(at: Int(rand))
            randomString += NSString(characters: &nextChar, length: 1) as String
        }
        
        return randomString
    }
}